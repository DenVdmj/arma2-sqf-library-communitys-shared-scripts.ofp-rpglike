// sqf
#define RPG_ConversationMacro 1
#define currentLanguage (localize "STR:LANGUAGE")
#define currentPath (localize "STR:LANGUAGE")
#define arg(x) (_this select(x))
#define argIf(x) if(count _this>(x))
#define argIfType(x,t) if(argIf(x)then{(arg(x)call funcGetVarType)==(t)}else{false})
#define argSafe(x) argIf(x)then{arg(x)}
#define argSafeType(x,t) argIfType(x,t)then{arg(x)}
#define argOr(x,v) (argSafe(x)else{v})
#define x(a) ((a) select 0)
#define y(a) ((a) select 1)
#define z(a) ((a) select 2)
#define push(a,v)  (a)set[count(a),(v)]
#define pushTo(a)  call{(a)set[count(a),_this]}

// меняет начальный фрейм (приветствия)
#define setAve(frame) ((frame)call(_setAve))

// устанавливает другой файл разговоров
#define setAveFile(file,frame) ([file,frame]call(_setAveFile))

// устанавливает код который будет выполнен при закрытии диалога, обратите внимание на другой тип синтаксиса
// использование: { hint "Пока-пока!" } setBye
#define setBye call(_setBye)

// устанавливает метку-флаг в память непися, например: addFlag("непись обиделся")
#define addFlag(f) ((f)call(_addFlag))
// удаляет метку-флаг из памяти непися, например: delFlag("непись обиделся")
#define delFlag(f) ((f)call(_delFlag))
// проверяет наличие метки-флага в памяти непися, например: isFlag("непись обиделся")
#define isFlag(f) ((f)call(_isFlag))

// устанавливает собственную функцию торговли, см. как написан _openTradeDialog, юз: {функция} setTrade
#define setTrade call _setTrade

// записывает переменную в память непися: [имя, значение] setVar
#define setVar call _setVar

// читает переменную из памяти непися: [имя, значение по умолчанию] setVar
#define getVar call _getVar

// удаляет переменные из памяти непися: [список имен переменных] delVar
#define delVar call _delVar


